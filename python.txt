#1c
class Customer:
  def __init__(self,cust_id,name,email,contact):
   self.cust_id = cust_id
   self.name = name
   self.email = email
   self.contact = contact

   def input_details(self):
    print("Enter Customer Details :")
    self.cust_id = input("Customer ID :")
    self.name = input("Name :")
    self.email = input("Email :")
    self.contact = input("Contact :")

  def display_details(self):
    print(f"Customer ID : {self.cust_id}")
    print(f"Name : {self.name}")
    print(f"Email : {self.email}")
    print(f"Contact : {self.contact}")

  def __del__(self):
    print("Destructor is called")

c1 = Customer(101,"ROHAN","abc@xyz.com","123456789")
c1.display_details()

c2 = Customer(100,"JOHN","abc@xyz.com","234567891")
c2.display_details()


#2a
#Method to add,subtract,multiply and divide two variables
class Calculator:
    def __init__(self, a, b):
        self.a = a  # Instance variable
        self.b = b  # Instance variable

    def add(self):
        return self.a + self.b  # Adding instance variables

    def sub(self):
        return self.a - self.b

# Create an object
obj = Calculator(5, 10)
print(obj.add())
print(obj.sub())


#2c
class StaticDemo:
    @staticmethod
    def is_positive(number):
        """Check if a number is positive or negative."""
        if number > 0:
            return f"{number} is Positive"
        elif number < 0:
            return f"{number} is Negative"
        else:
            return "The number is Zero"

    @staticmethod
    def is_even(number):
        """Check if a number is even or odd."""
        if number % 2 == 0:
            return f"{number} is Even"
        else:
            return f"{number} is Odd"

    @staticmethod
    def is_valid_email(email):
        """Check if an email is valid."""
        if "@" in email and "." in email:
            return f"{email} is a Valid Email"
        else:
            return f"{email} is an Invalid Email"

# Using the static methods
print(StaticDemo.is_positive(10))    # Output: 10 is Positive
print(StaticDemo.is_positive(-5))    # Output: -5 is Negative
print(StaticDemo.is_positive(0))     # Output: The number is Zero

print(StaticDemo.is_even(4))         # Output: 4 is Even
print(StaticDemo.is_even(7))         # Output: 7 is Odd

print(StaticDemo.is_valid_email("test@example.com"))  # Output: test@example.com is a Valid Email
print(StaticDemo.is_valid_email("invalid-email"))     # Output: invalid-email is an Invalid Email




#8
import sqlite3
import os
#
conn = sqlite3.connect("my_database.db")  # Creates a new database file if it doesnâ€™t exist
cursor = conn.cursor()
#
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    age INTEGER
)
""")
conn.commit()  # Save changes
#
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("Alice", 25))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("Rohit", 26))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("BOb", 27))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("Rahul", 28))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("John", 29))
conn.commit()
#
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()

for row in rows:
    print(row)
#
##to update records
cursor.execute("UPDATE users SET age = ? WHERE name = ?", (30, "Alice"))
conn.commit()
print("Record updated successfully!")
#
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()  

for row in rows:
    print(row)
#
 ##to update records
cursor.execute("UPDATE users SET age = 30 WHERE age > 25")
conn.commit()
print("Record updated successfully!")
#
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()

for row in rows:
    print(row)
#
##to delete record
cursor.execute("DELETE FROM users WHERE name = ?", ("Rohit",))
conn.commit()
print("Record deleted successfully!")
#
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()

for row in rows:
    print(row)

#
##to delete all records
cursor.execute("DELETE FROM users")
conn.commit()
print("All records deleted successfully!")
#
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()

for row in rows:
    print(row)
#
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("Alice", 25))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("Rohit", 26))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("BOb", 27))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("Rahul", 28))
cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ("John", 29))
conn.commit()
#
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()

for row in rows:
    print(row)
#
from sqlite3 import dbapi2
db_name = "my_database.db"

if os.path.exists(db_name):
  os.remove(db_name)
  print(f"Database '{db_name}' has been deleted.")
else:
  print(f"Database '{db_name}' does not exist.")


#9
#a
import ipywidgets as widgets
from IPython.display import display

# Create input box
text_input = widgets.Text(description="Enter text:")

# Create output label
output_label = widgets.Output()

# Create a button
button = widgets.Button(description="Submit")

# Function to handle button click
def on_button_click(b):
    with output_label:
        output_label.clear_output()
        print("You entered:", text_input.value)

# Attach function to button
button.on_click(on_button_click)

# Display widgets
display(text_input, button, output_label)


#b
import ipywidgets as widgets
from IPython.display import display

# Text input
text_input = widgets.Text(description="Enter text:")

# Radio buttons
radio = widgets.RadioButtons(
    options=["Option 1", "Option 2", "Option 3"],
    description="Choose one:"
)

# Checkboxes
checkbox1 = widgets.Checkbox(value=False, description="Enable feature A")
checkbox2 = widgets.Checkbox(value=False, description="Enable feature B")

# Output area
output_label = widgets.Output()

# Button click function
def on_button_click(b):
    with output_label:
        output_label.clear_output()
        print("You entered:", text_input.value)
        print("Selected option:", radio.value)
        print("Feature A enabled:", checkbox1.value)
        print("Feature B enabled:", checkbox2.value)

# Submit button
button = widgets.Button(description="Submit")
button.on_click(on_button_click)

# Display GUI elements
display(text_input, radio, checkbox1, checkbox2, button, output_label)

#c
import ipywidgets as widgets
from IPython.display import display

# Text input
text_input = widgets.Text(description="Name:")

# Dropdown menu
dropdown = widgets.Dropdown(
    options=["Option A", "Option B", "Option C"],
    description="Dropdown:"
)

# List selection (multi-select enabled)
list_select = widgets.SelectMultiple(
    options=["Item 1", "Item 2", "Item 3", "Item 4"],
    description="Select:"
)

# Text area
text_area = widgets.Textarea(
    description="Remarks:",
    placeholder="Enter your comments here..."
)

# Output display
output_label = widgets.Output()

# Submit button action
def on_button_click(b):
    with output_label:
        output_label.clear_output()
        print("Name:", text_input.value)
        print("Dropdown Selected:", dropdown.value)
        print("List Selection:", list(list_select.value))
        print("Remarks:", text_area.value)

# Submit button
button = widgets.Button(description="Submit")
button.on_click(on_button_click)

# Display all widgets
display(text_input, dropdown, list_select, text_area, button, output_label)



